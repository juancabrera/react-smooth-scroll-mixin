(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Scroller, scrollItems;

Scroller = require('./components/Scroller.coffee');

scrollItems = (_.range(20)).map(function(item, index) {
  return {
    name: "Item " + index,
    backgroundColor: 'grey'
  };
});

React.renderComponent(Scroller({
  scrollItems: scrollItems
}), document.getElementById('container'));


},{"./components/Scroller.coffee":3}],2:[function(require,module,exports){
var DOM, ScrollItem;

DOM = require('../utils/DOM.coffee');

ScrollItem = React.createClass({
  displayName: 'ScrollItem',
  onClick: function(event) {
    var $item;
    this.props.deleteItemByIndex(this.props.index);
    return;
    $item = this.getDOMNode();
    $item.style.backgroundColor = 'red';
    return TweenMax.to($item, .4, {
      height: 0,
      autoAlpha: 0,
      ease: Back.easeIn,
      onComplete: (function(_this) {
        return function() {};
      })(this)
    });
  },
  render: function() {
    var div, h1, style;
    div = DOM.div, h1 = DOM.h1;
    style = {
      backgroundColor: this.props.backgroundColor
    };
    return div({
      "class": 'item',
      style: style,
      onClick: this.onClick
    }, h1(this.props.name));
  }
});

module.exports = ScrollItem;


},{"../utils/DOM.coffee":5}],3:[function(require,module,exports){

/**
 * ScrollView illustrates the ability to intercept scroll events, pipe them through
 * an easing equasion, and then apply them to a container.  Useful in situations where
 * you would like to normalize scrolling across an unknown number of devices / platforms
 * and apply the result to a parallax container or typical webpage
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.2.14
 */
var DOM, ScrollItem, Scroller, SmoothScrollMixin;

DOM = require('../utils/DOM.coffee');

SmoothScrollMixin = require('../mixins/SmoothScrollMixin.coffee');

ScrollItem = require('./ScrollItem.coffee');

Scroller = React.createClass({
  displayName: 'Scroller',
  mixins: [SmoothScrollMixin],
  getInitialState: function() {
    return {
      scrollItems: []
    };
  },
  componentWillMount: function() {
    return this.setState({
      scrollItems: this.props.scrollItems
    });
  },
  onAddBtnClick: function() {
    this.state.scrollItems.push({
      name: "Item " + this.state.scrollItems.length
    });
    return this.forceUpdate();
  },
  deleteItemByIndex: function(index) {
    var items;
    items = _.without(this.state.scrollItems, this.state.scrollItems[index]);
    return this.setState({
      scrollItems: items
    });
  },
  render: function() {
    var button, div, scrollItems;
    div = DOM.div, button = DOM.button;
    scrollItems = this.state.scrollItems.map((function(_this) {
      return function(item, index) {
        return ScrollItem({
          name: item.name,
          index: index,
          backgroundColor: item.backgroundColor,
          deleteItemByIndex: _this.deleteItemByIndex
        });
      };
    })(this));
    return div({
      "class": 'ui-container'
    }, button({
      onClick: this.onAddBtnClick
    }, 'Add additional item'), div({
      "class": 'scroll-container',
      ref: 'scrollContainer'
    }, scrollItems));
  }
});

module.exports = Scroller;


},{"../mixins/SmoothScrollMixin.coffee":4,"../utils/DOM.coffee":5,"./ScrollItem.coffee":2}],4:[function(require,module,exports){

/**
 * Provides smooth, hardware-accellerated ease-based scrolling for container
 * elements by normalizing scroll behavior across different browsers / platforms.
 * Works great for parallax, or simply browsing a document.
 *
 * @author Christopher Pappas <chris@wintr.us>
 * @date   5.14.14
 */
var SmoothScrollMixin;

SmoothScrollMixin = {
  getInitialState: function() {
    return {
      friction: .2,
      nextPosition: 0,
      currentPosition: 0,
      scrollPercent: 0
    };
  },
  componentDidMount: function() {
    window.addEventListener('scroll', this.onScroll);
    this.setupStyles();
    this.updateHeight();
    return this.animationLoop();
  },
  componentDidUpdate: function() {
    return this.updateHeight();
  },
  setupStyles: function() {
    return this.refs.scrollContainer.getDOMNode().style.position = 'fixed';
  },
  updateHeight: function() {
    var $container;
    $container = this.refs.scrollContainer.getDOMNode();
    return $container.parentNode.style.height = $container.offsetHeight + 'px';
  },
  animationLoop: function() {
    var $container;
    $container = this.refs.scrollContainer.getDOMNode();
    this.state.currentPosition += ~~(this.state.nextPosition - this.state.currentPosition) * this.state.friction;
    this.state.scrollPercent = ~~(this.state.currentPosition / (parseInt($container.parentNode.style.height) - window.innerHeight) * 100);
    TweenLite.set($container, {
      y: -this.state.currentPosition
    });
    return requestAnimationFrame(this.animationLoop);
  },
  onScroll: function() {
    return this.setState({
      nextPosition: window.scrollY
    });
  }
};

module.exports = SmoothScrollMixin;


},{}],5:[function(require,module,exports){
var DOM, tag, tagName, _fn,
  __slice = [].slice;

DOM = React.DOM;

_fn = (function(_this) {
  return function(tagName) {
    return module.exports[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return tag.apply(null, [tagName].concat(__slice.call(args)));
    };
  };
})(this);
for (tagName in DOM) {
  _fn(tagName);
}

tag = function() {
  var args, attributes, name, _ref;
  name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (((_ref = args[0]) != null ? _ref.constructor : void 0) === Object) {
    attributes = args.shift();
  } else {
    attributes = {};
  }
  if (attributes.hasOwnProperty('class')) {
    attributes.className = attributes["class"];
    delete attributes["class"];
  }
  return DOM[name].apply(DOM, [attributes].concat(__slice.call(args)));
};


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
